#!/usr/bin/env ruby

list_file = "#{ENV['alfred_workflow_cache']}/list.json"

# Recheck films if list file does not exist or is older than a day or argument asks for it
if !File.exist?(list_file) || (((Time.now - File.mtime(list_file)) / (24 * 3600)).ceil > 1) || ARGV[0] == 'update_list'
  require 'rss'
  require 'json'
  require 'open3'
  require 'open-uri'
  require 'nokogiri'

  Dir.mkdir(ENV['alfred_workflow_cache']) unless Dir.exist?(ENV['alfred_workflow_cache'])

  site_rss = 'https://www.shortoftheweek.com/feed'
  site_feed = RSS::Parser.parse(URI.parse(site_rss).read)

  script_filter_items = []

  # Grab link from items, remove "/news/" links, load info from links into array
  site_feed.items.map(&:link).reject { |link| link.match('/news/') }.each do |item|
    # Get details
    page = Nokogiri::HTML(URI.parse(item).open, nil, Encoding::UTF_8.to_s) # Forced UTF-8
    url = page.at('.embed-wrapper').attr('data-src')
    title = page.at('h1.title').text
    image = URI.escape('https:' + page.at('.bar-hidden').at('img').attr('src'))
    synopsis = page.at('.description').text.strip
    details = page.at('.details')
    genre = details.at('span').text
    author = details.css('span')[1].text.strip.gsub(/\s+/, ' ') # `gsub` for carriage returns and extraneous spaces in the middle of strings
    duration = details.at('time') ? details.at('time').text : 'Unknown duration'

    # set banner image as icon
    downloaded_image = "#{ENV['alfred_workflow_cache']}/#{File.basename(image)}"
    unless File.exist?(downloaded_image) # Do not redownload or resize old images
      File.write(downloaded_image, URI.parse(image).read)
      image_width = Open3.capture2('sips', '--getProperty', 'pixelWidth', downloaded_image).first.split("\s").last.to_i
      image_height = Open3.capture2('sips', '--getProperty', 'pixelHeight', downloaded_image).first.split("\s").last.to_i
      smaller_dimension = (image_width > image_height ? image_height : image_width).to_s
      system('sips', '--cropToHeightWidth', smaller_dimension, smaller_dimension, downloaded_image, out: File::NULL)
    end

    script_filter_items.push(title: title, subtitle: "#{genre} / #{duration} / #{author}", icon: { path: downloaded_image }, mods: { alt: { subtitle: synopsis } }, quicklookurl: item, arg: url)
  end

  File.write(list_file, { items: script_filter_items }.to_json)
end

# Output list
puts File.read(list_file)
